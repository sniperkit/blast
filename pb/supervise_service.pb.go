// Code generated by protoc-gen-go.
// source: pb/supervise_service.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PutNodeRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Node    string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (m *PutNodeRequest) Reset()                    { *m = PutNodeRequest{} }
func (m *PutNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*PutNodeRequest) ProtoMessage()               {}
func (*PutNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PutNodeRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *PutNodeRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type GetNodeRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Node    string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (m *GetNodeRequest) Reset()                    { *m = GetNodeRequest{} }
func (m *GetNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeRequest) ProtoMessage()               {}
func (*GetNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetNodeRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *GetNodeRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type GetNodeResponse struct {
	Value *google_protobuf.Any `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *GetNodeResponse) Reset()                    { *m = GetNodeResponse{} }
func (m *GetNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNodeResponse) ProtoMessage()               {}
func (*GetNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetNodeResponse) GetValue() *google_protobuf.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

type DeleteNodeRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Node    string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (m *DeleteNodeRequest) Reset()                    { *m = DeleteNodeRequest{} }
func (m *DeleteNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeRequest) ProtoMessage()               {}
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DeleteNodeRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DeleteNodeRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func init() {
	proto.RegisterType((*PutNodeRequest)(nil), "pb.PutNodeRequest")
	proto.RegisterType((*GetNodeRequest)(nil), "pb.GetNodeRequest")
	proto.RegisterType((*GetNodeResponse)(nil), "pb.GetNodeResponse")
	proto.RegisterType((*DeleteNodeRequest)(nil), "pb.DeleteNodeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	PutNode(ctx context.Context, in *PutNodeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) PutNode(ctx context.Context, in *PutNodeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pb.Cluster/PutNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := grpc.Invoke(ctx, "/pb.Cluster/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/pb.Cluster/DeleteNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	PutNode(context.Context, *PutNodeRequest) (*google_protobuf1.Empty, error)
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*google_protobuf1.Empty, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_PutNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PutNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cluster/PutNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PutNode(ctx, req.(*PutNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cluster/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cluster/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutNode",
			Handler:    _Cluster_PutNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Cluster_GetNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Cluster_DeleteNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/supervise_service.proto",
}

func init() { proto.RegisterFile("pb/supervise_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x90, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x3b, 0x45, 0x1d, 0xbc, 0x82, 0xe2, 0xf5, 0x87, 0x31, 0x6e, 0x64, 0x56, 0xe2, 0x22,
	0x03, 0x55, 0x70, 0x55, 0xa1, 0xa8, 0xb8, 0x13, 0x99, 0x17, 0x90, 0xa6, 0xbd, 0x16, 0x61, 0x4c,
	0xe2, 0x24, 0x29, 0xf4, 0xc9, 0x7c, 0x3d, 0xc9, 0x4f, 0x95, 0x71, 0x70, 0xa3, 0xab, 0x24, 0xe7,
	0xdc, 0x43, 0xbe, 0x7b, 0x80, 0x69, 0x51, 0x19, 0xa7, 0xa9, 0x5d, 0xbe, 0x1a, 0x7a, 0x36, 0xfe,
	0x9c, 0x11, 0xd7, 0xad, 0xb2, 0x0a, 0x87, 0x5a, 0xb0, 0x93, 0x85, 0x52, 0x8b, 0x86, 0xaa, 0xa0,
	0x08, 0xf7, 0x52, 0x4d, 0xe5, 0x2a, 0xda, 0xec, 0xf4, 0xa7, 0x45, 0x6f, 0xda, 0x26, 0xb3, 0xbc,
	0x81, 0xdd, 0x27, 0x67, 0x1f, 0xd5, 0x9c, 0x6a, 0x7a, 0x77, 0x64, 0x2c, 0x16, 0x90, 0xcf, 0x1a,
	0x67, 0x2c, 0xb5, 0x45, 0x76, 0x96, 0x9d, 0x6f, 0xd7, 0xeb, 0x27, 0x22, 0x6c, 0x48, 0x35, 0xa7,
	0x62, 0x18, 0xe4, 0x70, 0xf7, 0xf9, 0x07, 0xfa, 0x47, 0x7e, 0x0c, 0x7b, 0x5f, 0x79, 0xa3, 0x95,
	0x34, 0x84, 0x17, 0xb0, 0xb9, 0x9c, 0x36, 0x8e, 0x42, 0x7c, 0x67, 0x74, 0xc8, 0x23, 0x3f, 0x5f,
	0xf3, 0xf3, 0x89, 0x5c, 0xd5, 0x71, 0xa4, 0x9c, 0xc0, 0xfe, 0x1d, 0x35, 0x64, 0xe9, 0xcf, 0x04,
	0xa3, 0x8f, 0x0c, 0xf2, 0xdb, 0xe4, 0x5f, 0x43, 0x9e, 0xda, 0x40, 0xe4, 0x5a, 0xf0, 0x6e, 0x35,
	0xec, 0xb8, 0x87, 0x72, 0xef, 0xab, 0x2c, 0x07, 0x78, 0x05, 0x79, 0x5a, 0x23, 0x06, 0xbb, 0x9d,
	0xb0, 0x83, 0x8e, 0x16, 0xf7, 0x2c, 0x07, 0x38, 0x06, 0xf8, 0xa6, 0xc7, 0x23, 0x3f, 0xd4, 0xdb,
	0xe6, 0xf7, 0x4f, 0xc5, 0x56, 0x50, 0x2e, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x88, 0x7a, 0xc4,
	0x7f, 0x1c, 0x02, 0x00, 0x00,
}
