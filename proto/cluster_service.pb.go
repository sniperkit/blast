// Code generated by protoc-gen-go.
// source: proto/cluster_service.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/cluster_service.proto
	proto/index_service.proto

It has these top-level messages:
	JoinRequest
	JoinResponse
	LeaveRequest
	LeaveResponse
	GetIndexPathResponse
	GetIndexMappingResponse
	GetIndexMetaResponse
	PutDocumentRequest
	PutDocumentResponse
	GetDocumentRequest
	GetDocumentResponse
	DeleteDocumentRequest
	DeleteDocumentResponse
	BulkRequest
	BulkResponse
	SearchRequest
	SearchResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type JoinRequest struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto1.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JoinRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type JoinResponse struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *JoinResponse) Reset()                    { *m = JoinResponse{} }
func (m *JoinResponse) String() string            { return proto1.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()               {}
func (*JoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JoinResponse) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type LeaveRequest struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *LeaveRequest) Reset()                    { *m = LeaveRequest{} }
func (m *LeaveRequest) String() string            { return proto1.CompactTextString(m) }
func (*LeaveRequest) ProtoMessage()               {}
func (*LeaveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LeaveRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type LeaveResponse struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *LeaveResponse) Reset()                    { *m = LeaveResponse{} }
func (m *LeaveResponse) String() string            { return proto1.CompactTextString(m) }
func (*LeaveResponse) ProtoMessage()               {}
func (*LeaveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LeaveResponse) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func init() {
	proto1.RegisterType((*JoinRequest)(nil), "proto.JoinRequest")
	proto1.RegisterType((*JoinResponse)(nil), "proto.JoinResponse")
	proto1.RegisterType((*LeaveRequest)(nil), "proto.LeaveRequest")
	proto1.RegisterType((*LeaveResponse)(nil), "proto.LeaveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := grpc.Invoke(ctx, "/proto.Cluster/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := grpc.Invoke(ctx, "/proto.Cluster/Leave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Cluster_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Cluster_Leave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster_service.proto",
}

func init() { proto1.RegisterFile("proto/cluster_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0x29, 0x2d, 0x2e, 0x49, 0x2d, 0x8a, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0xd5, 0x03, 0x8b, 0x0a, 0xb1, 0x82, 0x29, 0x25, 0x45, 0x2e, 0x6e, 0xaf, 0xfc, 0xcc, 0xbc,
	0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xfc, 0x94, 0x54, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x49, 0x89, 0x8b, 0x07, 0xa2, 0xa4, 0xb8, 0x20,
	0x3f, 0xaf, 0x38, 0x15, 0x97, 0x1a, 0x9f, 0xd4, 0xc4, 0xb2, 0x54, 0x7c, 0xe6, 0x28, 0x73, 0xf1,
	0x42, 0xd5, 0xe0, 0x36, 0xc8, 0xa8, 0x88, 0x8b, 0xdd, 0x19, 0xe2, 0x5e, 0x21, 0x43, 0x2e, 0x16,
	0x90, 0xbd, 0x42, 0x42, 0x10, 0x17, 0xeb, 0x21, 0xb9, 0x53, 0x4a, 0x18, 0x45, 0x0c, 0x62, 0x9e,
	0x12, 0x83, 0x90, 0x09, 0x17, 0x2b, 0xd8, 0x0a, 0x21, 0x98, 0x3c, 0xb2, 0xa3, 0xa4, 0x44, 0x50,
	0x05, 0x61, 0xba, 0x92, 0xd8, 0xc0, 0xc2, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0x42,
	0xa6, 0xf2, 0x30, 0x01, 0x00, 0x00,
}
