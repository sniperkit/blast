// Code generated by protoc-gen-go.
// source: protobuf/cluster_rpc.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	protobuf/cluster_rpc.proto
	protobuf/index_rpc.proto
	protobuf/message.proto

It has these top-level messages:
	PutDocumentRequest
	PutDocumentResponse
	GetDocumentRequest
	GetDocumentResponse
	DeleteDocumentRequest
	DeleteDocumentResponse
	BulkRequest
	BulkResponse
	SearchRequest
	SearchResponse
	PutNodeRequest
	GetNodeRequest
	GetNodeResponse
	DeleteNodeRequest
	PutIndexMappingRequest
	GetIndexMappingRequest
	GetIndexMappingResponse
	DeleteIndexMappingRequest
	PutIndexMetaRequest
	GetIndexMetaRequest
	GetIndexMetaResponse
	DeleteIndexMetaRequest
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	PutNode(ctx context.Context, in *PutNodeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	PutIndexMapping(ctx context.Context, in *PutIndexMappingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetIndexMapping(ctx context.Context, in *GetIndexMappingRequest, opts ...grpc.CallOption) (*GetIndexMappingResponse, error)
	DeleteIndexMapping(ctx context.Context, in *DeleteIndexMappingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	PutIndexMeta(ctx context.Context, in *PutIndexMetaRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetIndexMeta(ctx context.Context, in *GetIndexMetaRequest, opts ...grpc.CallOption) (*GetIndexMetaResponse, error)
	DeleteIndexMeta(ctx context.Context, in *DeleteIndexMetaRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) PutNode(ctx context.Context, in *PutNodeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/blast.Cluster/PutNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := grpc.Invoke(ctx, "/blast.Cluster/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/blast.Cluster/DeleteNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) PutIndexMapping(ctx context.Context, in *PutIndexMappingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/blast.Cluster/PutIndexMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetIndexMapping(ctx context.Context, in *GetIndexMappingRequest, opts ...grpc.CallOption) (*GetIndexMappingResponse, error) {
	out := new(GetIndexMappingResponse)
	err := grpc.Invoke(ctx, "/blast.Cluster/GetIndexMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteIndexMapping(ctx context.Context, in *DeleteIndexMappingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/blast.Cluster/DeleteIndexMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) PutIndexMeta(ctx context.Context, in *PutIndexMetaRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/blast.Cluster/PutIndexMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetIndexMeta(ctx context.Context, in *GetIndexMetaRequest, opts ...grpc.CallOption) (*GetIndexMetaResponse, error) {
	out := new(GetIndexMetaResponse)
	err := grpc.Invoke(ctx, "/blast.Cluster/GetIndexMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteIndexMeta(ctx context.Context, in *DeleteIndexMetaRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/blast.Cluster/DeleteIndexMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	PutNode(context.Context, *PutNodeRequest) (*google_protobuf1.Empty, error)
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*google_protobuf1.Empty, error)
	PutIndexMapping(context.Context, *PutIndexMappingRequest) (*google_protobuf1.Empty, error)
	GetIndexMapping(context.Context, *GetIndexMappingRequest) (*GetIndexMappingResponse, error)
	DeleteIndexMapping(context.Context, *DeleteIndexMappingRequest) (*google_protobuf1.Empty, error)
	PutIndexMeta(context.Context, *PutIndexMetaRequest) (*google_protobuf1.Empty, error)
	GetIndexMeta(context.Context, *GetIndexMetaRequest) (*GetIndexMetaResponse, error)
	DeleteIndexMeta(context.Context, *DeleteIndexMetaRequest) (*google_protobuf1.Empty, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_PutNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PutNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/PutNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PutNode(ctx, req.(*PutNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_PutIndexMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutIndexMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PutIndexMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/PutIndexMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PutIndexMapping(ctx, req.(*PutIndexMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetIndexMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetIndexMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/GetIndexMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetIndexMapping(ctx, req.(*GetIndexMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteIndexMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteIndexMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/DeleteIndexMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteIndexMapping(ctx, req.(*DeleteIndexMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_PutIndexMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutIndexMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PutIndexMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/PutIndexMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PutIndexMeta(ctx, req.(*PutIndexMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetIndexMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetIndexMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/GetIndexMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetIndexMeta(ctx, req.(*GetIndexMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteIndexMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteIndexMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blast.Cluster/DeleteIndexMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteIndexMeta(ctx, req.(*DeleteIndexMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blast.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutNode",
			Handler:    _Cluster_PutNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Cluster_GetNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Cluster_DeleteNode_Handler,
		},
		{
			MethodName: "PutIndexMapping",
			Handler:    _Cluster_PutIndexMapping_Handler,
		},
		{
			MethodName: "GetIndexMapping",
			Handler:    _Cluster_GetIndexMapping_Handler,
		},
		{
			MethodName: "DeleteIndexMapping",
			Handler:    _Cluster_DeleteIndexMapping_Handler,
		},
		{
			MethodName: "PutIndexMeta",
			Handler:    _Cluster_PutIndexMeta_Handler,
		},
		{
			MethodName: "GetIndexMeta",
			Handler:    _Cluster_GetIndexMeta_Handler,
		},
		{
			MethodName: "DeleteIndexMeta",
			Handler:    _Cluster_DeleteIndexMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/cluster_rpc.proto",
}

func init() { proto.RegisterFile("protobuf/cluster_rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x8f, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x77, 0x33, 0x27, 0x87, 0x41, 0x21, 0xa0, 0x48, 0xc7, 0x44, 0xf6, 0x00, 0x19, 0xe8,
	0x9d, 0x57, 0xa2, 0x93, 0xb1, 0x81, 0x52, 0x76, 0xe9, 0x8d, 0xa4, 0xdb, 0xb1, 0x08, 0x5d, 0x13,
	0x9b, 0x13, 0xd0, 0xd7, 0xf0, 0x89, 0xa5, 0x4d, 0x9b, 0xa6, 0xa5, 0x52, 0xbd, 0x4b, 0xfe, 0x3f,
	0xe7, 0xcb, 0xf9, 0x20, 0x54, 0xb9, 0x24, 0x19, 0x9b, 0xb7, 0xe5, 0x3e, 0x35, 0x9a, 0x30, 0x7f,
	0xcd, 0xd5, 0x9e, 0x97, 0x21, 0x1b, 0xc7, 0xa9, 0xd0, 0x14, 0x9e, 0xbb, 0x27, 0x47, 0xd4, 0x5a,
	0x24, 0x68, 0xeb, 0x70, 0x96, 0x48, 0x99, 0xa4, 0xb8, 0x74, 0x35, 0x1e, 0x15, 0x7d, 0xd9, 0xf2,
	0xfa, 0x7b, 0x0c, 0x93, 0x07, 0x4b, 0x64, 0xb7, 0x30, 0x89, 0x0c, 0x3d, 0xcb, 0x03, 0xb2, 0x33,
	0x5e, 0x32, 0x79, 0x75, 0xdf, 0xe1, 0x87, 0xc1, 0xe2, 0x0b, 0x6e, 0x59, 0xbc, 0x66, 0xf1, 0xc7,
	0x82, 0xb5, 0x18, 0x15, 0xb3, 0x6b, 0x6c, 0xcf, 0x56, 0xf7, 0x66, 0xb6, 0x13, 0x6b, 0x25, 0x33,
	0x8d, 0x8b, 0x11, 0xbb, 0x03, 0x58, 0x61, 0x8a, 0x84, 0xe5, 0xf8, 0x45, 0xf5, 0xae, 0x89, 0x86,
	0x7f, 0xdf, 0x42, 0x10, 0x19, 0xda, 0x64, 0x07, 0xfc, 0x7c, 0x12, 0x4a, 0xbd, 0x67, 0x09, 0x9b,
	0x37, 0x06, 0x7e, 0x3e, 0xcc, 0xda, 0x41, 0xb0, 0xc6, 0x7e, 0x56, 0x27, 0xaf, 0x59, 0x97, 0xbf,
	0xd5, 0xce, 0x30, 0x02, 0x66, 0x75, 0x5a, 0xd8, 0xab, 0x96, 0xe9, 0xff, 0xb6, 0x5c, 0xc1, 0xd4,
	0x99, 0x21, 0x09, 0x16, 0x76, 0x75, 0x91, 0xc4, 0x30, 0x65, 0x03, 0x53, 0xb7, 0xb4, 0x4f, 0xf1,
	0xc3, 0x9a, 0x32, 0xeb, 0xed, 0x9c, 0xe2, 0x16, 0x02, 0xdf, 0xa3, 0xa0, 0xcd, 0x7b, 0xfc, 0xfe,
	0xb2, 0xd6, 0x3d, 0xbc, 0x9c, 0xd6, 0x59, 0x7c, 0x52, 0x9e, 0x6e, 0x7e, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0xe2, 0x7b, 0xa1, 0x01, 0x03, 0x00, 0x00,
}
